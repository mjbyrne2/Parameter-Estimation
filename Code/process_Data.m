%% process_Data.m
% Processes the data generated by AdaptiveWindowedRegularization.m to
% create plots/tables. The plots use myFigProps.m. Data must be loaded
% prior to running this script.

%% Plot errors and parameters:

fig = figure('Regularization parameters and relative errors');
for j = 1:P
    subplot(P+1,1,j)
    boxplot(alpha(:,j:2:end),methods)
    ylabel(['\alpha^{(',num2str(j),')}'])
end
subplot(P+1,1,P+1)
boxplot(err,methods)
ylabel('Relative error')
if P == 1
    sgtitle(['Parameters and resulting errors ',config(1:31),')'])
else
    sgtitle(['Parameters and resulting errors ',config])
end
myFigProps(fig)

%% Plots of images:

% Save a copies of images in Bv2 and Dv2 as a single images:
BigBv2 = [Bv2(:,:,1),Bv2(:,:,2),Bv2(:,:,3),Bv2(:,:,4);...
    Bv2(:,:,5),Bv2(:,:,6),Bv2(:,:,7),Bv2(:,:,8)];
BigDv2 = [Dv2(:,:,1),Dv2(:,:,2),Dv2(:,:,3),Dv2(:,:,4);...
    Dv2(:,:,5),Dv2(:,:,6),Dv2(:,:,7),Dv2(:,:,8)];

%% Plot trend of adapted parameters
% The order of markers/colors for the methods is fixed, even if the order 
% of the array "methods" is not. This fixed ordering is done for 
% consistency betweens runs.

Best.lineType = 'o:k';
UPRE.lineType = 'd:r';
GCV.lineType = '*:b';
MDP.lineType = 's:g';
% <- Add more methods here 

methodNumber = numel(userInputs.methods);   % Number of specified methods

fig = figure('Trend of adapted regularization parameters');
for j = 1:P
    subplot(P,1,j)
    hold on
    for k = 1:methodNumber
        plot(Rvec,alphaBig(:,j,k),eval(strcat(methods(k),".lineType")))
    end
    hold off
    xlim([1,Rvec(end)])
    legend(methods)
    ylabel(['\alpha^{(',num2str(j),')}'])
    xlabel('Number of data sets (R)')
end
if P == 1
    sgtitle(['Parameters and resulting errors ',config(1:31),')'])
else
    sgtitle(['Adapted parameters ',config])
end
myFigProps(fig)

%% Plot best solutions from the second validation set
% Uses the last adapted best parameters (parameter found by using Rvec(end)
% data sets).

desiredMethod = input(strcat("From which method do you want to generate images? (String options: ",...
    """",join(methods,""", "),"""","): "));
if ~ismember(userMethods,userInputs.methods)
    disp(strcat("Error: Specified method not found. Using method ",...
        methods(1),"instead."))
    methodIndex = 1;
else
    methodIndex = find(strcmp(desiredMethod,userInputs.methods));
end 

% Loop over all images from the second validation set (8):
for j = 1:8
    fig = figure(['Validation image ' num2str(j)]);
    xReg = xWinBig(alphaBig(end,:,methodIndex),W,Dv2_hat(:,:,j),delta,...
        delta2,lambda);
    imshow([Xv2(:,:,j),Bv2(:,:,j),Dv2(:,:,j),xReg])
    title(['Relative error of regularized solution: ',...
        num2str(100*errBig(end,16+j,methodIndex),'%.2f'),'%'])
    % 16+j is used above since there are 16 images in the training and
    % first validation sets combined
    myFigProps(fig)
end

%% Form tables:

% Fix tables:

f = '%.5f'; % Format of strings
RN = arrayfun(@num2str,Rvec,'UniformOutput',0); % Cell array version of Rvec used as row names
VN = {'Learned','UPRE','GCV'}; % Variable names
Training = table(num2str(squeeze(sum(errBig_T(:,:,1),2))/Rt,f),...
    num2str(squeeze(sum(errBig_T(:,:,2),2))/Rt,f),...
    num2str(squeeze(sum(errBig_T(:,:,3),2))/Rt,f),'VariableNames',VN);
Validation = table(num2str(squeeze(sum(errBig_V(:,:,1),2))/Rv,f),...
    num2str(squeeze(sum(errBig_V(:,:,2),2))/Rv,f),...
    num2str(squeeze(sum(errBig_V(:,:,3),2))/Rv,f),'VariableNames',VN);
Validation2 = table(num2str(squeeze(sum(errBig_V2(:,:,1),2))/8,f),...
    num2str(squeeze(sum(errBig_V2(:,:,2),2))/8,f),...
    num2str(squeeze(sum(errBig_V2(:,:,3),2))/8,f),'VariableNames',VN);
T = table(Training,Validation,Validation2,'RowNames',RN);
